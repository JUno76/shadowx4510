use ejs template make social media post for crud operation


ChatGPT said:
To create a simple Social Media Post CRUD application using Node.js, MongoDB, and EJS templates, follow the steps below. This will include displaying, creating, updating, and deleting posts on the front-end using EJS.

Steps to Create the CRUD Application
1. Install the Required Packages
First, make sure you have Node.js and MongoDB installed. Then, initialize your project and install dependencies:

bash
Copy
Edit
npm init -y
npm install express mongoose ejs body-parser
2. Setup Express Server
Create a new file server.js to set up the server and handle CRUD operations.

3. Create the MongoDB Model for the Post
In models/Post.js, create the model for the social media posts.

javascript
Copy
Edit
const mongoose = require('mongoose');

// Post Schema
const postSchema = new mongoose.Schema({
    title: String,
    content: String,
    author: String,
    createdAt: { type: Date, default: Date.now }
});

// Export the Post model
module.exports = mongoose.model('Post', postSchema);
4. Create Routes for CRUD Operations in server.js
Create the server in server.js with routes for creating, reading, updating, and deleting posts.

javascript
Copy
Edit
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const path = require('path');
const Post = require('./models/Post');  // Post model

const app = express();

// Middleware
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));

// Set EJS as the templating engine
app.set('view engine', 'ejs');

// MongoDB connection
mongoose.connect('mongodb://localhost:27017/socialMediaApp', {
    useNewUrlParser: true,
    useUnifiedTopology: true
})
    .then(() => console.log('Connected to MongoDB'))
    .catch((err) => console.log(err));

// Home Route (Get All Posts)
app.get('/', async (req, res) => {
    try {
        const posts = await Post.find();
        res.render('index', { posts });
    } catch (err) {
        res.status(500).send(err);
    }
});

// Create a Post (Get Form)
app.get('/create', (req, res) => {
    res.render('create');
});

// Create a Post (Post Data)
app.post('/create', async (req, res) => {
    const { title, content, author } = req.body;
    const newPost = new Post({ title, content, author });
    try {
        await newPost.save();
        res.redirect('/');
    } catch (err) {
        res.status(500).send(err);
    }
});

// Edit a Post (Get Form)
app.get('/edit/:id', async (req, res) => {
    try {
        const post = await Post.findById(req.params.id);
        res.render('edit', { post });
    } catch (err) {
        res.status(500).send(err);
    }
});

// Edit a Post (Post Data)
app.post('/edit/:id', async (req, res) => {
    try {
        await Post.findByIdAndUpdate(req.params.id, req.body);
        res.redirect('/');
    } catch (err) {
        res.status(500).send(err);
    }
});

// Delete a Post
app.get('/delete/:id', async (req, res) => {
    try {
        await Post.findByIdAndDelete(req.params.id);
        res.redirect('/');
    } catch (err) {
        res.status(500).send(err);
    }
});

// Start the Server
const port = 3000;
app.listen(port, () => {
    console.log(`Server running on http://localhost:${port}`);
});
5. Create the EJS Templates for Views
Now, create views using EJS templates to render the data and interact with the user.

index.ejs (Main Page to Display Posts)
Create views/index.ejs for displaying all posts.

html
Copy
Edit
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Social Media App</title>
    <link rel="stylesheet" href="/styles.css">
</head>
<body>

    <header>
        <h1>Social Media Post</h1>
        <a href="/create">Create New Post</a>
    </header>

    <div class="posts">
        <% posts.forEach(post => { %>
            <div class="post">
                <h2><%= post.title %></h2>
                <p><%= post.content %></p>
                <p><strong>Author:</strong> <%= post.author %></p>
                <p><strong>Created At:</strong> <%= post.createdAt.toLocaleString() %></p>
                <a href="/edit/<%= post._id %>">Edit</a>
                <a href="/delete/<%= post._id %>">Delete</a>
            </div>
        <% }) %>
    </div>

</body>
</html>
create.ejs (Create a New Post Form)
Create views/create.ejs for creating new posts.

html
Copy
Edit
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Post</title>
    <link rel="stylesheet" href="/styles.css">
</head>
<body>

    <header>
        <h1>Create New Post</h1>
        <a href="/">Back to Home</a>
    </header>

    <form action="/create" method="POST">
        <label for="title">Title</label>
        <input type="text" name="title" required>
        
        <label for="content">Content</label>
        <textarea name="content" required></textarea>
        
        <label for="author">Author</label>
        <input type="text" name="author" required>

        <button type="submit">Create Post</button>
    </form>

</body>
</html>
edit.ejs (Edit an Existing Post Form)
Create views/edit.ejs to edit an existing post.

html
Copy
Edit
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Post</title>
    <link rel="stylesheet" href="/styles.css">
</head>
<body>

    <header>
        <h1>Edit Post</h1>
        <a href="/">Back to Home</a>
    </header>

    <form action="/edit/<%= post._id %>" method="POST">
        <label for="title">Title</label>
        <input type="text" name="title" value="<%= post.title %>" required>

        <label for="content">Content</label>
        <textarea name="content" required><%= post.content %></textarea>

        <label for="author">Author</label>
        <input type="text" name="author" value="<%= post.author %>" required>

        <button type="submit">Update Post</button>
    </form>

</body>
</html>
6. Add Some Basic Styling
Create a public/styles.css file to add some basic styles to the application.

css
Copy
Edit
body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    padding: 0;
}

header {
    background-color: #4CAF50;
    color: white;
    padding: 15px;
    text-align: center;
}

header a {
    color: white;
    text-decoration: none;
    margin-left: 15px;
}

.posts {
    padding: 20px;
}

.post {
    background-color: white;
    margin-bottom: 20px;
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

form {
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    width: 400px;
    margin: 0 auto;
}

form label {
    display: block;
    margin: 10px 0 5px;
}

form input,
form textarea {
    width: 100%;
    padding: 10px;
    margin-bottom: 10px;
    border-radius: 5px;
    border: 1px solid #ccc;
}

form button {
    background-color: #4CAF50;
    color: white;
    padding: 10px;
    border: none;
    border-radius: 5px;
    width: 100%;
}

form button:hover {
    background-color: #45a049;
}
7. Run the Application
Run the server with:

bash
Copy
Edit
node server.js
Open your browser and go to http://localhost:3000. You should see the CRUD operations for managing social media posts.

Summary:
This setup uses Node.js, Express, and MongoDB for handling CRUD operations.

EJS templates are used to render dynamic content on the front-end.

The CRUD operations (Create, Read, Update, Delete) can be done via a web interface where you can add, view, update, and delete social media posts.